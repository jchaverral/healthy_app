# -*- coding: utf-8 -*-
"""Proyecto_final_Josselyn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FkxYm6Rqeo-rRzUIBOcXnboRLBWIb9W0

https://www.kaggle.com/datasets/abdullah0a/human-age-prediction-synthetic-dataset/data
"""

import pandas              as pd
import numpy               as np
import matplotlib.pyplot   as plt
import seaborn as sns
from matplotlib.lines import Line2D

#Leer los datos e imprimirlos
#display.max_columns: determina cuántas columnas se muestran al imprimir un DataFrame.
#None: indica que no hay límite para el número de columnas que se mostrarán.

df = pd.read_csv('Train.csv')
pd.set_option('display.max_columns', None)
df.tail()

#Guardo las columnas en una lista y las muestro en un Dataframe
column_list = list(df.columns)
titulos_columnas = pd.DataFrame(df.columns, columns=['Columnas'])
titulos_columnas

#Revisamos cantidad de elementos nulos
df.isnull().sum()

#Revisamos % de elementos nulos
df.isnull().mean()

#para unificar algunos datos, vamos a eliminar los decimales, redondeando y dejamos solo numeros enteros
df[['Height (cm)',
 'Weight (kg)',
 'Cholesterol Level (mg/dL)',
 'BMI',
 'Blood Glucose Level (mg/dL)',
 'Hearing Ability (dB)',
 'Cognitive Function',
 'Stress Levels',
 'Pollution Exposure',
 'Sun Exposure',
 'Age (years)']] = df[['Height (cm)',
 'Weight (kg)',
 'Cholesterol Level (mg/dL)',
 'BMI',
 'Blood Glucose Level (mg/dL)',
 'Hearing Ability (dB)',
 'Cognitive Function',
 'Stress Levels',
 'Pollution Exposure',
 'Sun Exposure',
 'Age (years)']].round(0)

df[['Height (cm)',
 'Weight (kg)',
 'Cholesterol Level (mg/dL)',
 'BMI',
 'Blood Glucose Level (mg/dL)',
 'Hearing Ability (dB)',
 'Cognitive Function',
 'Stress Levels',
 'Pollution Exposure',
 'Sun Exposure',
 'Age (years)']].astype(int)

#mostramos nuevamente el DF completo
pd.set_option('display.max_columns', None)
df.tail()

#agrupamos por edad para visualisar cantidad de datos por cada edad
df.groupby('Age (years)').count()

#Lista de elementos para graficar rapidamente
column_list3 = ['0',
 'Height (cm)',
 'Weight (kg)',
 'Cholesterol Level (mg/dL)',
 'BMI',
 'Blood Glucose Level (mg/dL)',
 'Hearing Ability (dB)',
 'Cognitive Function',
 'Stress Levels',
 'Pollution Exposure',
 'Sun Exposure',
 'Age (years)']

titulo = 'Gender'
#categorias = list(df.groupby('Gender'))
dic_valores = df['Gender'].value_counts().to_dict()
etiquetas = list(dic_valores.keys())
valores = list(dic_valores.values())

valores

for i in range(1,9):
  dic_categ = df[column_list3[i]].value_counts().to_dict()
  etiquetas = list(dic_categ.keys())
  valores = list(dic_categ.values())
  plt.subplot(3,3,i)
  plt.bar(etiquetas, valores)
plt.show()

column_list2 = ['0',
  'Gender',
 'Height (cm)',
 'Weight (kg)',
 'BMI',
 'Vision Sharpness',
 'Smoking Status',
 'Alcohol Consumption',
 'Diet',
 'Chronic Diseases',
 'Medication Use',
 'Family History',
 'Sleep Patterns',
 'Education Level',
 'Income Level',
 'Age (years)'
 ]

df_graf = df.groupby('Gender').count().reset_index()
df_graf

def figura_distr (grupo, nom_grupo, valor, color_graf, color_borde):
  df_graf = df.groupby(grupo).count().reset_index()
  categorias = df_graf[grupo]
  valores = df_graf[valor]
  x = np.arange(len(categorias))
  plt.bar(x, valores, color = color_graf, edgecolor=color_borde, alpha=0.75)
  plt.title(f'distribución de datos por {nom_grupo}', fontsize=12, fontweight='bold', pad=20)
  plt.xlabel(f'{grupo}', fontsize=10)
  plt.ylabel('Cantidad', fontsize=10)
  for i in range(len(categorias)):
      plt.text(x[i], valores[i]+0.5, str(valores[i]),  rotation=90, ha='center', va='bottom', fontsize=10, color='black')
  plt.xticks(x, categorias, ha='center')
  plt.grid(axis='y', linestyle='--', alpha=0.7)

plt.figure(figsize=(8, 4))
figura_distr ('Gender','el genero','Height (cm)', '#87ceeb','black')
plt.show()

df['Rango edad'] = df['Age (years)'].apply(lambda valor: '18-20' if valor <= 20 else
                                                         '21-29' if 21 <= valor <= 29 else
                                                         '30-39' if 30 <= valor <= 39 else
                                                         '40-49' if 40 <= valor <= 49 else
                                                         '50-59' if 50 <= valor < 60 else 'mayor a 60')

figura_distr ('Rango edad','el rango de edades','Height (cm)', '#ffff00','black')
plt.show()

df['Rango peso'] = df['Weight (kg)'].apply(lambda valor: '33 - 45' if valor <= 45.0 else
                                                         '46 - 59' if 46 <= valor <= 59 else
                                                         '60 - 79' if 60 <= valor <= 79 else
                                                         '80 - 89' if 80 <= valor <= 89 else
                                                         '90 - 100' if 90 <= valor <= 100 else 'mayor a 100')

figura_distr ('Rango peso','el rango de peso','Height (cm)', '#00ff00','black')
plt.show()

df['Stress Levels'].max()

df['Nivel de estres'] = df['Stress Levels'].apply(lambda valor: 'Bajo' if valor <= 3 else
                                                                'Medio' if 4 <= valor <= 6 else 'Alto')

figura_distr ('Nivel de estres','el nivel de estres','Height (cm)','#ffa500','black')
plt.show()

df_hombres = df[df['Gender'] == 'Male']
df_mujeres = df[df['Gender'] == 'Female']

df_grup_hombres = df_hombres.groupby('Rango edad').count().reset_index()
df_grup_mujeres = df_mujeres.groupby('Rango edad').count().reset_index()

categorias1 = df_grup_hombres ['Rango edad']
valores1 = df_grup_hombres['Height (cm)']

categorias2 = df_grup_mujeres['Rango edad']
valores2 = df_grup_mujeres['Height (cm)']

x = np.arange(len(categorias2))
width = 0.35

plt.bar(x - width/2, valores1, width, label='Hombres', color = '#87ceeb', edgecolor='black', alpha=0.75)
plt.bar(x + width/2, valores2, width, label='Mujeres', color = '#ffb6c1', edgecolor='black', alpha=0.75)

plt.title('Rango de edades segun el genero', fontsize=12, fontweight='bold', pad=20)
#plt.xlabel(f'{grupo}', fontsize=10)
plt.ylabel('Cantidad', fontsize=10)
for i in range(len(categorias1)):
  plt.text(x[i]- width/2, valores1[i]+0.5, str(valores1[i]),  rotation=90, ha='center', va='bottom', fontsize=10, color='black')
for i in range(len(categorias2)):
  plt.text(x[i]+ width/2, valores2[i]+0.5, str(valores2[i]),  rotation=90, ha='center', va='bottom', fontsize=10, color='black')
plt.xticks(x, categorias1, ha='center')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

df_estres_bajo = df[df['Nivel de estres'] == 'Bajo']
df_estres_medio = df[df['Nivel de estres'] == 'Medio']
df_estres_alto = df[df['Nivel de estres'] == 'Alto']

df_grup_bajo = df_estres_bajo.groupby('Rango edad').count().reset_index()
df_grup_medio = df_estres_medio.groupby('Rango edad').count().reset_index()
df_grup_alto = df_estres_alto.groupby('Rango edad').count().reset_index()

categorias1 = df_grup_bajo['Rango edad']
valores1 = df_grup_bajo['Height (cm)']

categorias2 = df_grup_medio['Rango edad']
valores2 = df_grup_medio['Height (cm)']

categorias3 = df_grup_alto['Rango edad']
valores3 = df_grup_alto['Height (cm)']

x = np.arange(len(categorias2))
width = 0.2

plt.bar(x - width, valores1, width, label='Bajo', color = '#ffff00', edgecolor='black', alpha=0.75)
plt.bar(x, valores2, width, label='Medio', color = '#ffa500', edgecolor='black', alpha=0.75)
plt.bar(x + width, valores3, width, label='Alto', color = '#ff0000', edgecolor='black', alpha=0.75)

plt.title('Nivel de estres segun el rango de edades', fontsize=12, fontweight='bold', pad=20)
#plt.xlabel(f'{grupo}', fontsize=10)
plt.ylabel('Cantidad', fontsize=10)
for i in range(len(categorias1)):
  plt.text(x[i]- width, valores1[i]+0.5, str(valores1[i]),  rotation=90, ha='center', va='bottom', fontsize=10, color='black')
for i in range(len(categorias2)):
  plt.text(x[i], valores2[i]+0.5, str(valores2[i]),  rotation=90, ha='center', va='bottom', fontsize=10, color='black')
for i in range(len(categorias2)):
  plt.text(x[i]+ width, valores3[i]+0.5, str(valores3[i]),  rotation=90, ha='center', va='bottom', fontsize=10, color='black')
plt.xticks(x, categorias1, ha='center')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

df_hombres = df[df['Gender'] == 'Male']
df_mujeres = df[df['Gender'] == 'Female']

df_grup_hombres = df_hombres.groupby('Nivel de estres').count().reset_index()
df_grup_mujeres = df_mujeres.groupby('Nivel de estres').count().reset_index()

categorias1 = df_grup_hombres ['Nivel de estres']
valores1 = df_grup_hombres['Height (cm)']

categorias2 = df_grup_mujeres['Nivel de estres']
valores2 = df_grup_mujeres['Height (cm)']

x = np.arange(len(categorias2))
width = 0.35

plt.bar(x - width/2, valores1, width, label='Hombres', color = '#87ceeb', edgecolor='black', alpha=0.75)
plt.bar(x + width/2, valores2, width, label='Mujeres', color = '#ffb6c1', edgecolor='black', alpha=0.75)

plt.title('Nivel de estres segun el genero', fontsize=12, fontweight='bold', pad=20)
#plt.xlabel(f'{grupo}', fontsize=10)
plt.ylabel('Cantidad', fontsize=10)
for i in range(len(categorias1)):
  plt.text(x[i]- width/2, valores1[i]+0.5, str(valores1[i]),  rotation=90, ha='center', va='bottom', fontsize=10, color='black')
for i in range(len(categorias2)):
  plt.text(x[i]+ width/2, valores2[i]+0.5, str(valores2[i]),  rotation=90, ha='center', va='bottom', fontsize=10, color='black')
plt.xticks(x, categorias1, ha='center')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

df2 = df.sort_values(by='Age (years)')
x = df_grup_bajo['Rango edad'] # Puntos en el eje X
y = df_grup_bajo['Height (cm)'] # Puntos en el eje Y


plt.title("Nivel de estres bajo según la edad", fontsize=15, fontweight='bold', pad=12)
plt.plot(x, y)

plt.xlabel('Age (years)', fontsize=10, fontweight='bold', labelpad=8)
#plt.xticks(rotation=45)  # Rota las etiquetas 45 grados
plt.ylabel('Stress Levels', fontsize=10, fontweight='bold', labelpad=8)
plt.grid(True, linestyle='--', linewidth=0.7, alpha=0.7)
plt.gca().set_facecolor('#f7f7f7')

plt.show()

df2 = df.sort_values(by='Age (years)')
x = df_grup_medio['Rango edad'] # Puntos en el eje X
y = df_grup_medio['Height (cm)'] # Puntos en el eje Y


plt.title("Nivel de estres medio según la edad", fontsize=15, fontweight='bold', pad=12)
plt.plot(x, y)

plt.xlabel('Age (years)', fontsize=10, fontweight='bold', labelpad=8)
#plt.xticks(rotation=45)  # Rota las etiquetas 45 grados
plt.ylabel('Stress Levels', fontsize=10, fontweight='bold', labelpad=8)
plt.grid(True, linestyle='--', linewidth=0.7, alpha=0.7)
plt.gca().set_facecolor('#f7f7f7')

plt.show()

df_grup_alto2 = df_estres_alto.groupby('Age (years)').count().reset_index()

x = df_grup_alto2['Age (years)'] # Puntos en el eje X
y = df_grup_alto2['Height (cm)'] # Puntos en el eje Y


plt.title("Nivel de estres alto según la edad", fontsize=15, fontweight='bold', pad=12)
plt.plot(x, y)

plt.xlabel('Age (years)', fontsize=10, fontweight='bold', labelpad=8)
#plt.xticks(rotation=45)  # Rota las etiquetas 45 grados
plt.ylabel('Stress Levels', fontsize=10, fontweight='bold', labelpad=8)
plt.grid(True, linestyle='--', linewidth=0.7, alpha=0.7)
plt.gca().set_facecolor('#f7f7f7')

plt.show()